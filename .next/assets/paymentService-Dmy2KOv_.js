import{s as i}from"./index-BKQD_-HN.js";import"./vendor-CVTJcK-9.js";const y={async sendNotification(a,o,r){try{const{error:t}=await i.from("notifications").insert({user_id:a,message:o,type:r,read:!1});if(t)throw t;return{success:!0}}catch(t){throw console.error("Error sending notification:",t),t}}},S={async createPayment(a,o,r){console.log("[paymentService] 1. Starting createPayment with:",{contractId:a,amount:o,paymentType:r});let t;try{console.log("[paymentService] 2. Environment check - isDev:",!1);const n="/api/payments";console.log("[paymentService] Using API URL:",n),console.log("[paymentService] 3. Preparing to make request to:",n);const d={contractId:a,amount:Number(o),paymentType:r};console.log("[paymentService] 4. Request payload:",JSON.stringify(d,null,2));const f=Date.now();console.log("[paymentService] 5. Making fetch request at:",new Date().toISOString()),console.log("[paymentService] 5.1 Request URL:",n);try{const e=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({contractId:a,amount:Number(o),paymentType:r}),credentials:"same-origin"});if(!e.ok){let u=`HTTP error! status: ${e.status}`;try{const w=await e.json();u=w.message||w.error||JSON.stringify(w)}catch{u=await e.text()||e.statusText||`HTTP error! status: ${e.status}`}throw console.error("[paymentService] Server responded with error:",{status:e.status,statusText:e.statusText,url:e.url,error:u}),new Error(u)}const c=await e.json();if(!c.link&&!c.payment_link&&!c.paymentLink)throw new Error("No payment link received from server");console.log("[paymentService] 5.2 Fetch completed, status:",e.status),console.log("[paymentService] 5.4 Payment created successfully:",c);const{payment_link:_,paymentLink:g}=c,h=c.link||_||g;if(!h)throw new Error("No payment link received from the server");return h}catch(e){console.error("[paymentService] 5.5 Fetch error:",e),e instanceof TypeError?(console.error("[paymentService] 5.6 This is likely a CORS or network issue. Check if the backend server is running and accessible."),console.error("[paymentService] 5.7 Try accessing this URL directly in your browser:",n)):e instanceof Error&&console.error("[paymentService] Error stack:",e.stack);const c=e instanceof Error?e.message:"Unknown error occurred";throw new Error(`Payment creation failed: ${c}`)}const{data:l,error:p}=await i.from("contracts").select("id, client_id, freelancer_id, title").eq("id",a).single();if(p)throw console.error("Error fetching contract:",p),new Error("Failed to fetch contract details");if(!l)throw new Error("Contract not found");const m=l;try{await y.sendNotification(m.client_id,`Payment request of $${o} for contract "${m.title}"`,"payment"),await y.sendNotification(m.freelancer_id,`Payment request of $${o} has been sent to the client for contract "${m.title}"`,"payment")}catch(e){console.error("Error sending notifications:",e)}return t}catch(s){throw console.error("Error in createPayment:",s),s}},async handlePaymentSuccess(a,o){const{data:r,error:t}=await i.from("payments").select("*, contract:contracts!inner(id, freelancer_id, client_id, title, status)").eq("id",a).single();if(t||!r)throw console.error("Error fetching payment:",t),new Error("Payment not found or access denied");const{error:s}=await i.from("payments").update({status:"paid",cashfree_payment_id:o,paid_at:new Date().toISOString()}).eq("id",a);if(s)throw s;const n=r.amount*.1,d=r.amount-n,{data:f,error:l}=await i.from("freelancer_wallets").select("available_balance, total_earned").eq("freelancer_id",r.contract.freelancer_id).single();if(l&&l.code!=="PGRST116")throw console.error("Error fetching wallet:",l),l;const p=((f==null?void 0:f.available_balance)||0)+d,m=((f==null?void 0:f.total_earned)||0)+d,{error:e}=await i.from("freelancer_wallets").upsert({freelancer_id:r.contract.freelancer_id,available_balance:p,total_earned:m},{onConflict:"freelancer_id"});if(e)throw console.error("Error updating wallet:",e),e;if(await y.sendNotification(r.contract.freelancer_id,`Payment of $${r.amount.toFixed(2)} received. Your wallet has been credited with $${d.toFixed(2)}.`,"payment"),await y.sendNotification(r.contract.client_id,`Payment of $${r.amount.toFixed(2)} has been processed successfully.`,"payment"),r.payment_type==="completion"){const{error:c}=await i.from("contracts").update({status:"completed",completed_at:new Date().toISOString()}).eq("id",r.contract_id);if(c)throw console.error("Error updating contract status:",c),c}},async requestPayout(a,o,r){const{data:t,error:s}=await i.from("freelancer_wallets").select("available_balance").eq("freelancer_id",a).single();if(s)throw s;if(!t||t.available_balance<o)throw new Error("Insufficient balance for this payout request.");const{data:n,error:d}=await i.from("payout_requests").insert([{freelancer_id:a,amount:o,status:"pending",bank_account_number:r.accountNumber,bank_ifsc_code:r.ifscCode}]).select().single();if(d)throw d;const f=t.available_balance-o,{error:l}=await i.from("freelancer_wallets").update({available_balance:f}).eq("freelancer_id",a);if(l)throw await i.from("payout_requests").delete().eq("id",n.id),l;return await y.sendNotification(a,`Payout request of $${o.toFixed(2)} has been submitted and is being processed.`,"payout"),n},async getPaymentHistory(a){const{data:o,error:r}=await i.from("profiles").select("role").eq("id",a).single();if(r||!o)throw new Error("User not found");let t=i.from("payments").select(`
                id,
                amount,
                status,
                payment_type,
                created_at,
                contract:contracts!inner(
                    title,
                    client:client_profiles!inner(
                        company_name
                    ),
                    freelancer:freelancer_profiles!inner(
                        full_name
                    )
                )
            `).order("created_at",{ascending:!1});o.role==="freelancer"?t=t.eq("contract.freelancer_id",a):o.role==="client"&&(t=t.eq("contract.client_id",a));const{data:s,error:n}=await t;if(n)throw console.error("Error fetching payment history:",n),n;return s||[]}};export{S as default};
//# sourceMappingURL=paymentService-Dmy2KOv_.js.map
